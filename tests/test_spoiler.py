'Temp file used for testing new logic system.'
import json,random,pytest,randomizer.Lists.Exceptions as Ex
from randomizer.Fill import Generate_Spoiler
from randomizer.Settings import Settings
from randomizer.Spoiler import Spoiler
@pytest.fixture
def generate_lo_rando_race_settings():'Generate a data dictionary that mimics what the front end passes to the shuffler.';C=True;B=False;A={};A['seed']=random.randint(0,100000000);A['fast_start_beginning_of_game']=C;A['enemy_rando']=C;A['crown_enemy_rando']=C;A['enemy_speed_rando']=C;A['boss_kong_rando']=C;A['boss_location_rando']=C;A['random_medal_requirement']=B;A['medal_requirement']=15;A['medal_cb_req']=75;A['kasplat_rando_setting']='location_shuffle';A['kong_rando']=C;A['bananaport_rando']='off';A['activate_all_bananaports']='isles';A['move_rando']='on';A['training_barrels']='shuffled';A['shockwave_status']='shuffled_decoupled';A['shuffle_items']=C;A['random_prices']='low';A['randomize_blocker_required_amounts']=C;A['blocker_0']=0;A['blocker_1']=0;A['blocker_2']=0;A['blocker_3']=0;A['blocker_4']=0;A['blocker_5']=0;A['blocker_6']=0;A['blocker_7']=50;A['blocker_text']=69;A['maximize_helm_blocker']=C;A['randomize_cb_required_amounts']=C;A['troff_0']=500;A['troff_1']=500;A['troff_2']=500;A['troff_3']=500;A['troff_4']=500;A['troff_5']=500;A['troff_6']=500;A['troff_text']=400;A['level_randomization']='level_order';A['damage_amount']='default';A['no_healing']=B;A['no_melons']=B;A['hard_shooting']=B;A['hard_mad_jack']=B;A['perma_death']=B;A['crown_door_open']=B;A['coin_door_open']='need_zero';A['bonus_barrel_rando']=C;A['gnawty_barrels']=B;A['bonus_barrel_auto_complete']=B;A['open_lobbies']=B;A['open_levels']=B;A['randomize_pickups']=C;A['krool_phase_order_rando']=C;A['krool_random']=B;A['krool_phase_count']=3;A['helm_random']=B;A['helm_phase_count']=3;A['krool_access']=C;A['keys_random']=B;A['krool_key_count']=8;A['starting_random']=B;A['starting_kongs_count']=2;A['quality_of_life']=C;A['enable_tag_anywhere']=C;A['wrinkly_hints']='standard';A['disable_shop_hints']=B;A['warp_to_isles']=C;A['helm_setting']='skip_start';A['portal_numbers']=C;A['shop_indicator']=C;A['puzzle_rando']=C;A['fast_gbs']=C;A['high_req']=C;A['random_patches']=B;A['shuffle_shops']=B;A['free_trade_setting']='none';A['crown_placement_rando']=B;A['hard_blockers']=B;A['hard_troff_n_scoff']=B;A['cb_rando']=B;A['win_condition']='all_keys';A['wrinkly_location_rando']=B;A['tns_location_rando']=B;A['key_8_helm']=C;A['misc_changes_selected']=[];A['hard_level_progression']=B;A['no_logic']=B;return A
@pytest.fixture
def generate_settings():'Asdf.';A=json.load(open('static/presets/default.json'));A['seed']=random.randint(0,100000000);return A
def test_forward_fill(generate_lo_rando_race_settings):'Asdf.';B=generate_lo_rando_race_settings;B['algorithm']='forward';C=Settings(B);A=Spoiler(C);Generate_Spoiler(A);print(A);print(A.json);D=1/0;print(D);raise Exception